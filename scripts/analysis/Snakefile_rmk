import os

configfile: "config.yaml"


rule compute:
    input:
        expand("results/concatenated_osw_results.csv"),
        expand("results/mscore_threshold.csv"),
        expand("results/ID/msstats_input.csv"),
        expand("results/ID/msqrob2_input.csv"),
        expand("results/ID/triqler_input.csv"),
        expand("results/ID/top3_input.csv"),
        expand("results/ID/top3_results.csv"),
        expand("results/ID/triqler_results.csv"),
        expand("results/ID/msstats_results.csv"),
        expand("results/ID/msqrob2_results.csv"),

rule concatenate_osw:
    input:
        script = "concatenate_osw_results.py",
        file_directory = config["OSW_FILEDIR"] 
    output:
        output_file = "results/concatenated_osw_results.csv"
    shell:
        "python {input.script} \
            --file_directory {input.file_directory} \
            --output {output.output_file}"

rule compute_mscore4pepfdr:
    input:
        script = "mscore4pepfdr.r",
        input = "results/concatenated_osw_results.csv",
    params:    
        fft = config["MSCORE4PEPFDR_FFT"],
        fdr_target = config["MSCORE4PEPFDR_FDR_TARGET"]
    output:
        output_file = "results/mscore_threshold.csv"
    shell:
        "Rscript {input.script} \
            -i {input.input} \
            -o {output.output_file} \
            --fft {params.fft} \
            --fdr_target {params.fdr_target}"
 
rule convert_osw_to_msstats:
    input:
        script = "convert_osw_to_msstats.py",
        input_file = "results/concatenated_osw_results.csv"
    params:
        m_score_threshold = open("results/mscore_threshold.csv").read(),
        n_transitions = config["CONVERT_OSW_TO_MSTATS_N_TRANSITIONS"],
        min_peptides = config["CONVERT_OSW_TO_MSTATS_MIN_PEPTIDES"],
        max_peptides = config["CONVERT_OSW_TO_MSTATS_MAX_PEPTIDES"]
    output:
        output = "results/ID/msstats_input.csv"
    shell:
        "python {input.script} \
            --input_file {input.input_file} \
            --output {output.output} \
            --m_score_threshold {params.m_score_threshold} \
            --n_transitions {params.n_transitions} \
            --min_peptides {params.min_peptides} \
            --max_peptides {params.max_peptides}"

rule convert_osw_to_msqrob2:
    input:
        script = "convert_osw_to_msqrob2.py",
        input_file = "results/concatenated_osw_results.csv"
    params:
        m_score_threshold = open("results/mscore_threshold.csv").read()
    output:
        output = "results/ID/msqrob2_input.csv"
    shell:
        "python {input.script} \
            --input_file {input.input_file} \
            --mscore_threshold {params.m_score_threshold} \
            --output {output.output}"   

rule convert_osw_to_triqler:
    input:
        script = "convert_osw_to_triqler.py",
        input_file = "results/concatenated_osw_results.csv"
    output:
        output = "results/ID/triqler_input.csv"
    shell:
        "python {input.script} \
            --input_file {input.input_file} \
            --output {output.output}"

rule convert_osw_to_top3:
    input:
        script = "top3_formatter/osw.py",
        input_dir = config["OSW_FILEDIR"]
    params:
        m_score_threshold = open("results/mscore_threshold.csv").read()
    output:
        output = "results/ID/top3_input.csv"
    shell:
        "python {input.script} --file_dir {input.input_dir} --output {output.output} --m_score_threshold {params.m_score_threshold}"

rule compute_osw_top3:
    input:
        script = "top3.py",
        input_file = "results/ID/top3_input.csv"
    output:
        output = "results/ID/top3_results.csv"
    shell:
        "python {input.script} \
            --input {input.input_file} \
            --output {output.output}"

rule compute_osw_triqler:
    input:
        input_file = "results/ID/triqler_input.csv"
    output:
        output = "results/ID/triqler_results.csv"
    params:
        fc_eval = config["TRIQLER_FC_EVAL"]
    shell:
        "python -m triqler {input.input_file} \
            --out_file {output.output} \
            --fold_change_eval {params.fc_eval} \
            --decoy_pattern DECOY"

rule compute_osw_msstats:
    input:
        script = "run_msstats.r",
        input = "results/ID/msstats_input.csv"
    output:
        output = "results/ID/msstats_results.csv"
    shell:
        "Rscript {input.script} \
            --input {input.input} \
            --output {output.output}"

rule compute_osw_msqrob2:
    input:
        script = "run_msqrob2.r",
        input = "results/ID/msqrob2_input.csv"
    output:
        output = "results/ID/msqrob2_results.csv"
    shell:
        "Rscript {input.script} \
            --input {input.input} \
            --output {output.output}"


